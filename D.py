"""
Реализуйте код алгоритма заполнения рюкзака, рассмотренного в лекции:
1. Взять наиболее ценный предмет, который поместится в рюкзак.
2. Выбрать следующий по стоимости товар с учётом того, что для него осталось место
рюкзаке.
в
Формат ввода
В первой строке записано целое число с в диапазоне от 0 до 1000 - вместимость рюкзака.
Во второй - число n - количество предметов. Оно не больше 10000.
В следующих и строках записано по 2 числа, разделенные пробелом: стоимость предмета и
его вес. Оба числа не превосходят 1000
Формат вывода
Нужно в строке вывести в отсортированном порядке номера предметов, которые будут
выбраны. Номер предмета - это порядковый номер его появления во входных данных.
(Индексация начинается с нуля)

Ввод
123
4
25 50
30 40
30 80
2 3

Вывод
1 2 3

Ввод
36
4
25 50
30 40
10 80
2 3

Вывод
3

Если стоимость предметов одинаковая, то выбираем предмет с меньшим весом. Если при
этом и вес одинаковый, выбираем тот, который пришел на вход первым.
"""

# Реализация по времени O(n(logn)) и по памяти O(n)

def solution(m, n, price):
    result = []
    def custom_sort_key(x):
        return (-x[0], x[1])
    price.sort(key=custom_sort_key)
    for i in range(n):
        if price[i][1] <= m:
            result.append(price[i][2])
            m -= price[i][1]
    return result

def main():
    try:
        m = int(input())
        if m < 0 or m > 1000:
            raise ValueError
        n = int(input())
        if n > 10000:
            raise ValueError
        price = []
        for i in range(n):
            p, w = map(int, input().split())
            price.append([p, w, i])
        for i in range(n):
            for j in range(2):
                if price[i][j] > 1000:
                    raise ValueError
        result = (solution(m, n, price))
        print(' '.join(map(str, result)))
    except ValueError:
        print("Invalid input")

if __name__ == '__main__':
    main()